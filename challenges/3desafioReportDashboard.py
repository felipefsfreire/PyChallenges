"""
Desafio: Relat√≥rios Avan√ßados e Dashboard de Vendas
Agora que voc√™ j√° armazenou os dados no SQLite, o desafio ser√° consultar e analisar os dados diretamente via SQL,
al√©m de criar um dashboard interativo para visualiza√ß√£o.

# Parte 1 - Consultas SQL Avan√ßadas
1. Clientes mais frequentes üîÅ
    a. Liste os 10 clientes que mais compraram (quantidade de pedidos realizados).
2. Produtos mais rent√°veis üí∞
    a. Encontre os 5 produtos que mais geraram receita total.
3. M√©dia de valor gasto por categoria üìä
    a. Liste as categorias de produtos com a m√©dia de valor gasto por pedido.
4. Compara√ß√£o de faturamento üìÖ
    a.Compare o faturamento entre o primeiro semestre (Jan-Jun) e o segundo semestre (Jul-Dez) de 2024.

# Parte 2 - Dashboard Interativo com Streamlit
Agora, crie um dashboard interativo usando Streamlit para visualizar os dados de forma din√¢mica.

1. Componentes do Dashboard:
    a. Filtro por m√™s üìÜ (para visualizar as vendas de um per√≠odo espec√≠fico).
    b. Gr√°ficos interativos üìä:
        I. Gr√°fico de barras com os produtos mais vendidos.
        II. Gr√°fico de linha mostrando o faturamento mensal.
        III. Tabela interativa com os clientes VIPs.
"""

import pandas as pd  # Importa a biblioteca Pandas para manipula√ß√£o de dados
import sqlite3  # Importa a biblioteca SQLite para intera√ß√£o com bancos de dados SQLite
import streamlit as st  # Importa a biblioteca Streamlit para cria√ß√£o de aplicativos web

conn = sqlite3.connect('salesEcommerce.db')  # Conecta ao banco de dados SQLite 'salesEcommerce.db'
cursor = conn.cursor()  # Cria um cursor para executar comandos SQL

# Define um dicion√°rio com consultas SQL para diferentes an√°lises
dicQueries = {
    "queryTopCustomers": '''
        SELECT customer, SUM(sales_quantity) AS sum_quantity
        FROM sales
        GROUP BY customer
        ORDER BY SUM(sales_quantity) DESC
        LIMIT 10
    ''',  # Consulta para obter os 10 clientes que mais compraram em quantidade
    "queryTopProducts": '''
        SELECT product, SUM(total_price) AS total_revenue
        FROM sales
        GROUP BY product
        ORDER BY SUM(total_price) DESC
        LIMIT 5
    ''',  # Consulta para obter os 5 produtos que geraram mais receita
    "queryAvgPriceCategory": '''
        SELECT category, ROUND(AVG(total_price), 2) AS avg_price
        FROM sales
        GROUP BY category
        ORDER BY AVG(total_price) DESC
    ''',  # Consulta para obter o pre√ßo m√©dio gasto por categoria
    "queryHalfYear": '''
        SELECT CASE 
            WHEN STRFTIME('%m', sales_date) BETWEEN '01' AND '06' THEN 'first half-year'
            WHEN STRFTIME('%m', sales_date) BETWEEN '07' AND '12' THEN 'second half-year'
        END AS half_year, ROUND(SUM(total_price), 2) AS total_revenue
        FROM sales
        WHERE STRFTIME('%Y', sales_date) = '2024'
        GROUP BY half_year
        ORDER BY half_year
    '''  # Consulta para comparar o faturamento entre o primeiro e o segundo semestre de 2024
}

def runQuery(queryKey, params=()):
    """Executa uma consulta SQL e retorna o resultado como um DataFrame.

    Args:
        queryKey (str): Chave da consulta no dicion√°rio `dicQueries`.
        params (tuple, optional): Par√¢metros para a consulta SQL. Padr√£o √© ().

    Returns:
        pandas.DataFrame: DataFrame com o resultado da consulta.
    """
    query = dicQueries[queryKey]  # Obt√©m a consulta SQL do dicion√°rio
    return pd.read_sql(query, conn, params=params)  # Executa a consulta e retorna o resultado como um DataFrame

dfTopCustomers = runQuery("queryTopCustomers")  # Executa a consulta para obter os top 10 clientes
dfTopProducts = runQuery("queryTopProducts")  # Executa a consulta para obter os top 5 produtos
dfAvgPriceCategory = runQuery("queryAvgPriceCategory")  # Executa a consulta para obter o pre√ßo m√©dio por categoria
dfHalfYear = runQuery("queryHalfYear")  # Executa a consulta para comparar o faturamento por semestre

print("Top 10 Clientes:")
print(dfTopCustomers)  # Imprime o DataFrame com os top 10 clientes

print("\nTop 5 Produtos mais rent√°veis:")
print(dfTopProducts)  # Imprime o DataFrame com os top 5 produtos

print("\nM√©dia de valor gasto por categoria:")
print(dfAvgPriceCategory)  # Imprime o DataFrame com o pre√ßo m√©dio por categoria

print("\nCompara√ß√£o de faturamento Jan-Jun e Jul-Dez:")
print(dfHalfYear)  # Imprime o DataFrame com a compara√ß√£o de faturamento por semestre


st.title(" Sales Dashboard - E-commerce")  # Define o t√≠tulo do aplicativo Streamlit

monthFilter = st.selectbox("Selecione um m√™s:", ["Todos"] + [f"{m:02d}/2024" for m in range(1, 13)])  # Cria um selectbox para filtrar os dados por m√™s

# Define um dicion√°rio com consultas SQL para visualiza√ß√£o dos dados
dicQueriesViz = {
    "queryBarTopProducts": '''
        SELECT product, SUM(sales_quantity) AS total_quantity
        FROM sales
        {whereClause}
        GROUP BY product
        ORDER BY SUM(sales_quantity) DESC
        LIMIT 10
    ''',  # Consulta para obter os 10 produtos mais vendidos em quantidade
    "queryLineMonthRevenue": '''
        SELECT STRFTIME('%m', sales_date) AS month, SUM(total_price) AS total_revenue
        FROM sales
        {whereClause}
        GROUP BY STRFTIME('%m', sales_date)
        ORDER BY STRFTIME('%m', sales_date)
    ''',  # Consulta para obter o faturamento mensal
    "queryVipCustomers": '''
        SELECT customer, SUM(sales_quantity) AS total_quantity, SUM(total_price) AS total_amount
        FROM sales
        {whereClause}
        GROUP BY customer
        ORDER BY SUM(total_price) DESC, SUM(sales_quantity) DESC, customer
        LIMIT 10
    '''  # Consulta para obter os 10 clientes VIPs (que mais compraram em valor e quantidade)
}

whereClause = ""  # Inicializa a cl√°usula WHERE da consulta SQL
params = ()  # Inicializa os par√¢metros da consulta SQL
if monthFilter != "Todos":  # Verifica se o filtro de m√™s foi selecionado
    selectMonth = monthFilter.split("/")[0]  # Obt√©m o n√∫mero do m√™s selecionado
    whereClause = "WHERE STRFTIME('%m', sales_date) = ? AND STRFTIME('%Y', sales_date) = '2024'"  # Define a cl√°usula WHERE para filtrar os dados pelo m√™s selecionado
    params = (selectMonth,)  # Define os par√¢metros da consulta SQL

def runQueryViz(queryKey):
    """Executa uma consulta SQL para visualiza√ß√£o e retorna o resultado como um DataFrame.

    Args:
        queryKey (str): Chave da consulta no dicion√°rio `dicQueriesViz`.

    Returns:
        pandas.DataFrame: DataFrame com o resultado da consulta.
    """
    query = dicQueriesViz[queryKey].format(whereClause=whereClause)  # Obt√©m a consulta SQL do dicion√°rio e formata com a cl√°usula WHERE
    return pd.read_sql(query, conn, params=params)  # Executa a consulta e retorna o resultado como um DataFrame

st.write("Gr√°fico de barras com os produtos mais vendidos.")  # Exibe um texto no aplicativo
dfBarTopProducts = runQueryViz("queryBarTopProducts")  # Executa a consulta para obter os top 10 produtos mais vendidos
if not dfBarTopProducts.empty:  # Verifica se o DataFrame n√£o est√° vazio
    st.bar_chart(dfBarTopProducts.set_index('product'), x_label="Products", y_label="Quantity")  # Cria um gr√°fico de barras com os top 10 produtos mais vendidos
else:
    st.write("Nenhum dado dispon√≠vel para o per√≠odo selecionado.")  # Exibe uma mensagem caso n√£o haja dados para o per√≠odo selecionado

st.write("Gr√°fico de linha faturamento mensal.")  # Exibe um texto no aplicativo
dfLineMonthRevenue = runQueryViz("queryLineMonthRevenue")  # Executa a consulta para obter o faturamento mensal
if not dfLineMonthRevenue.empty:  # Verifica se o DataFrame n√£o est√° vazio
    st.line_chart(dfLineMonthRevenue.set_index('month'), x_label="Months", y_label="Revenue")  # Cria um gr√°fico de linha com o faturamento mensal
else:
    st.write("Nenhum dado dispon√≠vel para o per√≠odo selecionado.")  # Exibe uma mensagem caso n√£o haja dados para o per√≠odo selecionado

st.write("Tabela interativa com os clientes VIPs")  # Exibe um texto no aplicativo
dfVipCustomers = runQueryViz("queryVipCustomers")  # Executa a consulta para obter os clientes VIPs
if not dfVipCustomers.empty:  # Verifica se o DataFrame n√£o est√° vazio
    st.dataframe(dfVipCustomers.style.highlight_max(subset=['total_quantity', 'total_amount']), hide_index=True)  # Cria uma tabela interativa com os clientes VIPs, destacando os maiores valores
else:
    st.write("Nenhum dado dispon√≠vel para o per√≠odo selecionado.")  # Exibe uma mensagem caso n√£o haja dados para o per√≠odo selecionado

conn.close()  # Fecha a conex√£o com o banco de dados